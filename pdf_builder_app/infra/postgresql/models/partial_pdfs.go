// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PartialPDF is an object representing the database table.
type PartialPDF struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UnifiedPDFID  string    `boil:"unified_pdf_id" json:"unified_pdf_id" toml:"unified_pdf_id" yaml:"unified_pdf_id"`
	SourceHTMLURL string    `boil:"source_html_url" json:"source_html_url" toml:"source_html_url" yaml:"source_html_url"`
	Number        int       `boil:"number" json:"number" toml:"number" yaml:"number"`
	S3URL         string    `boil:"s3_url" json:"s3_url" toml:"s3_url" yaml:"s3_url"`
	PDFCreatedAt  null.Time `boil:"pdf_created_at" json:"pdf_created_at,omitempty" toml:"pdf_created_at" yaml:"pdf_created_at,omitempty"`

	R *partialPDFR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L partialPDFL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PartialPDFColumns = struct {
	ID            string
	UnifiedPDFID  string
	SourceHTMLURL string
	Number        string
	S3URL         string
	PDFCreatedAt  string
}{
	ID:            "id",
	UnifiedPDFID:  "unified_pdf_id",
	SourceHTMLURL: "source_html_url",
	Number:        "number",
	S3URL:         "s3_url",
	PDFCreatedAt:  "pdf_created_at",
}

var PartialPDFTableColumns = struct {
	ID            string
	UnifiedPDFID  string
	SourceHTMLURL string
	Number        string
	S3URL         string
	PDFCreatedAt  string
}{
	ID:            "partial_pdfs.id",
	UnifiedPDFID:  "partial_pdfs.unified_pdf_id",
	SourceHTMLURL: "partial_pdfs.source_html_url",
	Number:        "partial_pdfs.number",
	S3URL:         "partial_pdfs.s3_url",
	PDFCreatedAt:  "partial_pdfs.pdf_created_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PartialPDFWhere = struct {
	ID            whereHelperstring
	UnifiedPDFID  whereHelperstring
	SourceHTMLURL whereHelperstring
	Number        whereHelperint
	S3URL         whereHelperstring
	PDFCreatedAt  whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"partial_pdfs\".\"id\""},
	UnifiedPDFID:  whereHelperstring{field: "\"partial_pdfs\".\"unified_pdf_id\""},
	SourceHTMLURL: whereHelperstring{field: "\"partial_pdfs\".\"source_html_url\""},
	Number:        whereHelperint{field: "\"partial_pdfs\".\"number\""},
	S3URL:         whereHelperstring{field: "\"partial_pdfs\".\"s3_url\""},
	PDFCreatedAt:  whereHelpernull_Time{field: "\"partial_pdfs\".\"pdf_created_at\""},
}

// PartialPDFRels is where relationship names are stored.
var PartialPDFRels = struct {
	UnifiedPDF string
}{
	UnifiedPDF: "UnifiedPDF",
}

// partialPDFR is where relationships are stored.
type partialPDFR struct {
	UnifiedPDF *UsersPDF `boil:"UnifiedPDF" json:"UnifiedPDF" toml:"UnifiedPDF" yaml:"UnifiedPDF"`
}

// NewStruct creates a new relationship struct
func (*partialPDFR) NewStruct() *partialPDFR {
	return &partialPDFR{}
}

func (r *partialPDFR) GetUnifiedPDF() *UsersPDF {
	if r == nil {
		return nil
	}
	return r.UnifiedPDF
}

// partialPDFL is where Load methods for each relationship are stored.
type partialPDFL struct{}

var (
	partialPDFAllColumns            = []string{"id", "unified_pdf_id", "source_html_url", "number", "s3_url", "pdf_created_at"}
	partialPDFColumnsWithoutDefault = []string{"id", "unified_pdf_id", "source_html_url", "number", "s3_url"}
	partialPDFColumnsWithDefault    = []string{"pdf_created_at"}
	partialPDFPrimaryKeyColumns     = []string{"id"}
	partialPDFGeneratedColumns      = []string{}
)

type (
	// PartialPDFSlice is an alias for a slice of pointers to PartialPDF.
	// This should almost always be used instead of []PartialPDF.
	PartialPDFSlice []*PartialPDF
	// PartialPDFHook is the signature for custom PartialPDF hook methods
	PartialPDFHook func(context.Context, boil.ContextExecutor, *PartialPDF) error

	partialPDFQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	partialPDFType                 = reflect.TypeOf(&PartialPDF{})
	partialPDFMapping              = queries.MakeStructMapping(partialPDFType)
	partialPDFPrimaryKeyMapping, _ = queries.BindMapping(partialPDFType, partialPDFMapping, partialPDFPrimaryKeyColumns)
	partialPDFInsertCacheMut       sync.RWMutex
	partialPDFInsertCache          = make(map[string]insertCache)
	partialPDFUpdateCacheMut       sync.RWMutex
	partialPDFUpdateCache          = make(map[string]updateCache)
	partialPDFUpsertCacheMut       sync.RWMutex
	partialPDFUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var partialPDFAfterSelectHooks []PartialPDFHook

var partialPDFBeforeInsertHooks []PartialPDFHook
var partialPDFAfterInsertHooks []PartialPDFHook

var partialPDFBeforeUpdateHooks []PartialPDFHook
var partialPDFAfterUpdateHooks []PartialPDFHook

var partialPDFBeforeDeleteHooks []PartialPDFHook
var partialPDFAfterDeleteHooks []PartialPDFHook

var partialPDFBeforeUpsertHooks []PartialPDFHook
var partialPDFAfterUpsertHooks []PartialPDFHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PartialPDF) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialPDFAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PartialPDF) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialPDFBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PartialPDF) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialPDFAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PartialPDF) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialPDFBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PartialPDF) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialPDFAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PartialPDF) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialPDFBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PartialPDF) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialPDFAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PartialPDF) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialPDFBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PartialPDF) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialPDFAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPartialPDFHook registers your hook function for all future operations.
func AddPartialPDFHook(hookPoint boil.HookPoint, partialPDFHook PartialPDFHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		partialPDFAfterSelectHooks = append(partialPDFAfterSelectHooks, partialPDFHook)
	case boil.BeforeInsertHook:
		partialPDFBeforeInsertHooks = append(partialPDFBeforeInsertHooks, partialPDFHook)
	case boil.AfterInsertHook:
		partialPDFAfterInsertHooks = append(partialPDFAfterInsertHooks, partialPDFHook)
	case boil.BeforeUpdateHook:
		partialPDFBeforeUpdateHooks = append(partialPDFBeforeUpdateHooks, partialPDFHook)
	case boil.AfterUpdateHook:
		partialPDFAfterUpdateHooks = append(partialPDFAfterUpdateHooks, partialPDFHook)
	case boil.BeforeDeleteHook:
		partialPDFBeforeDeleteHooks = append(partialPDFBeforeDeleteHooks, partialPDFHook)
	case boil.AfterDeleteHook:
		partialPDFAfterDeleteHooks = append(partialPDFAfterDeleteHooks, partialPDFHook)
	case boil.BeforeUpsertHook:
		partialPDFBeforeUpsertHooks = append(partialPDFBeforeUpsertHooks, partialPDFHook)
	case boil.AfterUpsertHook:
		partialPDFAfterUpsertHooks = append(partialPDFAfterUpsertHooks, partialPDFHook)
	}
}

// One returns a single partialPDF record from the query.
func (q partialPDFQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PartialPDF, error) {
	o := &PartialPDF{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for partial_pdfs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PartialPDF records from the query.
func (q partialPDFQuery) All(ctx context.Context, exec boil.ContextExecutor) (PartialPDFSlice, error) {
	var o []*PartialPDF

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PartialPDF slice")
	}

	if len(partialPDFAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PartialPDF records in the query.
func (q partialPDFQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count partial_pdfs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q partialPDFQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if partial_pdfs exists")
	}

	return count > 0, nil
}

// UnifiedPDF pointed to by the foreign key.
func (o *PartialPDF) UnifiedPDF(mods ...qm.QueryMod) usersPDFQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UnifiedPDFID),
	}

	queryMods = append(queryMods, mods...)

	return UsersPDFS(queryMods...)
}

// LoadUnifiedPDF allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (partialPDFL) LoadUnifiedPDF(ctx context.Context, e boil.ContextExecutor, singular bool, maybePartialPDF interface{}, mods queries.Applicator) error {
	var slice []*PartialPDF
	var object *PartialPDF

	if singular {
		var ok bool
		object, ok = maybePartialPDF.(*PartialPDF)
		if !ok {
			object = new(PartialPDF)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePartialPDF)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePartialPDF))
			}
		}
	} else {
		s, ok := maybePartialPDF.(*[]*PartialPDF)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePartialPDF)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePartialPDF))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &partialPDFR{}
		}
		args = append(args, object.UnifiedPDFID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &partialPDFR{}
			}

			for _, a := range args {
				if a == obj.UnifiedPDFID {
					continue Outer
				}
			}

			args = append(args, obj.UnifiedPDFID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users_pdfs`),
		qm.WhereIn(`users_pdfs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsersPDF")
	}

	var resultSlice []*UsersPDF
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsersPDF")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users_pdfs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users_pdfs")
	}

	if len(usersPDFAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UnifiedPDF = foreign
		if foreign.R == nil {
			foreign.R = &usersPDFR{}
		}
		foreign.R.UnifiedPDFPartialPDFS = append(foreign.R.UnifiedPDFPartialPDFS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UnifiedPDFID == foreign.ID {
				local.R.UnifiedPDF = foreign
				if foreign.R == nil {
					foreign.R = &usersPDFR{}
				}
				foreign.R.UnifiedPDFPartialPDFS = append(foreign.R.UnifiedPDFPartialPDFS, local)
				break
			}
		}
	}

	return nil
}

// SetUnifiedPDF of the partialPDF to the related item.
// Sets o.R.UnifiedPDF to related.
// Adds o to related.R.UnifiedPDFPartialPDFS.
func (o *PartialPDF) SetUnifiedPDF(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsersPDF) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"partial_pdfs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"unified_pdf_id"}),
		strmangle.WhereClause("\"", "\"", 2, partialPDFPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UnifiedPDFID = related.ID
	if o.R == nil {
		o.R = &partialPDFR{
			UnifiedPDF: related,
		}
	} else {
		o.R.UnifiedPDF = related
	}

	if related.R == nil {
		related.R = &usersPDFR{
			UnifiedPDFPartialPDFS: PartialPDFSlice{o},
		}
	} else {
		related.R.UnifiedPDFPartialPDFS = append(related.R.UnifiedPDFPartialPDFS, o)
	}

	return nil
}

// PartialPDFS retrieves all the records using an executor.
func PartialPDFS(mods ...qm.QueryMod) partialPDFQuery {
	mods = append(mods, qm.From("\"partial_pdfs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"partial_pdfs\".*"})
	}

	return partialPDFQuery{q}
}

// FindPartialPDF retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPartialPDF(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PartialPDF, error) {
	partialPDFObj := &PartialPDF{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"partial_pdfs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, partialPDFObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from partial_pdfs")
	}

	if err = partialPDFObj.doAfterSelectHooks(ctx, exec); err != nil {
		return partialPDFObj, err
	}

	return partialPDFObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PartialPDF) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no partial_pdfs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(partialPDFColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	partialPDFInsertCacheMut.RLock()
	cache, cached := partialPDFInsertCache[key]
	partialPDFInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			partialPDFAllColumns,
			partialPDFColumnsWithDefault,
			partialPDFColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(partialPDFType, partialPDFMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(partialPDFType, partialPDFMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"partial_pdfs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"partial_pdfs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into partial_pdfs")
	}

	if !cached {
		partialPDFInsertCacheMut.Lock()
		partialPDFInsertCache[key] = cache
		partialPDFInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PartialPDF.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PartialPDF) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	partialPDFUpdateCacheMut.RLock()
	cache, cached := partialPDFUpdateCache[key]
	partialPDFUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			partialPDFAllColumns,
			partialPDFPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update partial_pdfs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"partial_pdfs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, partialPDFPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(partialPDFType, partialPDFMapping, append(wl, partialPDFPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update partial_pdfs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for partial_pdfs")
	}

	if !cached {
		partialPDFUpdateCacheMut.Lock()
		partialPDFUpdateCache[key] = cache
		partialPDFUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q partialPDFQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for partial_pdfs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for partial_pdfs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PartialPDFSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partialPDFPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"partial_pdfs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, partialPDFPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in partialPDF slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all partialPDF")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PartialPDF) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no partial_pdfs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(partialPDFColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	partialPDFUpsertCacheMut.RLock()
	cache, cached := partialPDFUpsertCache[key]
	partialPDFUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			partialPDFAllColumns,
			partialPDFColumnsWithDefault,
			partialPDFColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			partialPDFAllColumns,
			partialPDFPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert partial_pdfs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(partialPDFPrimaryKeyColumns))
			copy(conflict, partialPDFPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"partial_pdfs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(partialPDFType, partialPDFMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(partialPDFType, partialPDFMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert partial_pdfs")
	}

	if !cached {
		partialPDFUpsertCacheMut.Lock()
		partialPDFUpsertCache[key] = cache
		partialPDFUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PartialPDF record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PartialPDF) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PartialPDF provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), partialPDFPrimaryKeyMapping)
	sql := "DELETE FROM \"partial_pdfs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from partial_pdfs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for partial_pdfs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q partialPDFQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no partialPDFQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from partial_pdfs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for partial_pdfs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PartialPDFSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(partialPDFBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partialPDFPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"partial_pdfs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, partialPDFPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from partialPDF slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for partial_pdfs")
	}

	if len(partialPDFAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PartialPDF) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPartialPDF(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PartialPDFSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PartialPDFSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partialPDFPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"partial_pdfs\".* FROM \"partial_pdfs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, partialPDFPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PartialPDFSlice")
	}

	*o = slice

	return nil
}

// PartialPDFExists checks if the PartialPDF row exists.
func PartialPDFExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"partial_pdfs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if partial_pdfs exists")
	}

	return exists, nil
}

// Exists checks if the PartialPDF row exists.
func (o *PartialPDF) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PartialPDFExists(ctx, exec, o.ID)
}
