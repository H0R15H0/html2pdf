// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPartialPDFS(t *testing.T) {
	t.Parallel()

	query := PartialPDFS()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPartialPDFSDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PartialPDFS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPartialPDFSQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PartialPDFS().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PartialPDFS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPartialPDFSSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PartialPDFSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PartialPDFS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPartialPDFSExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PartialPDFExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PartialPDF exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PartialPDFExists to return true, but got false.")
	}
}

func testPartialPDFSFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	partialPDFFound, err := FindPartialPDF(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if partialPDFFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPartialPDFSBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PartialPDFS().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPartialPDFSOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PartialPDFS().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPartialPDFSAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	partialPDFOne := &PartialPDF{}
	partialPDFTwo := &PartialPDF{}
	if err = randomize.Struct(seed, partialPDFOne, partialPDFDBTypes, false, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}
	if err = randomize.Struct(seed, partialPDFTwo, partialPDFDBTypes, false, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = partialPDFOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = partialPDFTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PartialPDFS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPartialPDFSCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	partialPDFOne := &PartialPDF{}
	partialPDFTwo := &PartialPDF{}
	if err = randomize.Struct(seed, partialPDFOne, partialPDFDBTypes, false, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}
	if err = randomize.Struct(seed, partialPDFTwo, partialPDFDBTypes, false, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = partialPDFOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = partialPDFTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PartialPDFS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func partialPDFBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PartialPDF) error {
	*o = PartialPDF{}
	return nil
}

func partialPDFAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PartialPDF) error {
	*o = PartialPDF{}
	return nil
}

func partialPDFAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PartialPDF) error {
	*o = PartialPDF{}
	return nil
}

func partialPDFBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PartialPDF) error {
	*o = PartialPDF{}
	return nil
}

func partialPDFAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PartialPDF) error {
	*o = PartialPDF{}
	return nil
}

func partialPDFBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PartialPDF) error {
	*o = PartialPDF{}
	return nil
}

func partialPDFAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PartialPDF) error {
	*o = PartialPDF{}
	return nil
}

func partialPDFBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PartialPDF) error {
	*o = PartialPDF{}
	return nil
}

func partialPDFAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PartialPDF) error {
	*o = PartialPDF{}
	return nil
}

func testPartialPDFSHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PartialPDF{}
	o := &PartialPDF{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, partialPDFDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PartialPDF object: %s", err)
	}

	AddPartialPDFHook(boil.BeforeInsertHook, partialPDFBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	partialPDFBeforeInsertHooks = []PartialPDFHook{}

	AddPartialPDFHook(boil.AfterInsertHook, partialPDFAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	partialPDFAfterInsertHooks = []PartialPDFHook{}

	AddPartialPDFHook(boil.AfterSelectHook, partialPDFAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	partialPDFAfterSelectHooks = []PartialPDFHook{}

	AddPartialPDFHook(boil.BeforeUpdateHook, partialPDFBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	partialPDFBeforeUpdateHooks = []PartialPDFHook{}

	AddPartialPDFHook(boil.AfterUpdateHook, partialPDFAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	partialPDFAfterUpdateHooks = []PartialPDFHook{}

	AddPartialPDFHook(boil.BeforeDeleteHook, partialPDFBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	partialPDFBeforeDeleteHooks = []PartialPDFHook{}

	AddPartialPDFHook(boil.AfterDeleteHook, partialPDFAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	partialPDFAfterDeleteHooks = []PartialPDFHook{}

	AddPartialPDFHook(boil.BeforeUpsertHook, partialPDFBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	partialPDFBeforeUpsertHooks = []PartialPDFHook{}

	AddPartialPDFHook(boil.AfterUpsertHook, partialPDFAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	partialPDFAfterUpsertHooks = []PartialPDFHook{}
}

func testPartialPDFSInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PartialPDFS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPartialPDFSInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(partialPDFColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PartialPDFS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPartialPDFToOneUsersPDFUsingUnifiedPDF(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PartialPDF
	var foreign UsersPDF

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, partialPDFDBTypes, false, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usersPDFDBTypes, false, usersPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersPDF struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UnifiedPDFID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UnifiedPDF().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUsersPDFHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UsersPDF) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PartialPDFSlice{&local}
	if err = local.L.LoadUnifiedPDF(ctx, tx, false, (*[]*PartialPDF)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UnifiedPDF == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UnifiedPDF = nil
	if err = local.L.LoadUnifiedPDF(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UnifiedPDF == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPartialPDFToOneSetOpUsersPDFUsingUnifiedPDF(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PartialPDF
	var b, c UsersPDF

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partialPDFDBTypes, false, strmangle.SetComplement(partialPDFPrimaryKeyColumns, partialPDFColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usersPDFDBTypes, false, strmangle.SetComplement(usersPDFPrimaryKeyColumns, usersPDFColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usersPDFDBTypes, false, strmangle.SetComplement(usersPDFPrimaryKeyColumns, usersPDFColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsersPDF{&b, &c} {
		err = a.SetUnifiedPDF(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UnifiedPDF != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UnifiedPDFPartialPDFS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UnifiedPDFID != x.ID {
			t.Error("foreign key was wrong value", a.UnifiedPDFID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UnifiedPDFID))
		reflect.Indirect(reflect.ValueOf(&a.UnifiedPDFID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UnifiedPDFID != x.ID {
			t.Error("foreign key was wrong value", a.UnifiedPDFID, x.ID)
		}
	}
}

func testPartialPDFSReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPartialPDFSReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PartialPDFSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPartialPDFSSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PartialPDFS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	partialPDFDBTypes = map[string]string{`ID`: `uuid`, `UnifiedPDFID`: `uuid`, `SourceHTMLURL`: `text`, `Number`: `integer`, `S3URL`: `text`, `PDFCreatedAt`: `timestamp without time zone`}
	_                 = bytes.MinRead
)

func testPartialPDFSUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(partialPDFPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(partialPDFAllColumns) == len(partialPDFPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PartialPDFS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPartialPDFSSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(partialPDFAllColumns) == len(partialPDFPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PartialPDF{}
	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PartialPDFS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, partialPDFDBTypes, true, partialPDFPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(partialPDFAllColumns, partialPDFPrimaryKeyColumns) {
		fields = partialPDFAllColumns
	} else {
		fields = strmangle.SetComplement(
			partialPDFAllColumns,
			partialPDFPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PartialPDFSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPartialPDFSUpsert(t *testing.T) {
	t.Parallel()

	if len(partialPDFAllColumns) == len(partialPDFPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PartialPDF{}
	if err = randomize.Struct(seed, &o, partialPDFDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PartialPDF: %s", err)
	}

	count, err := PartialPDFS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, partialPDFDBTypes, false, partialPDFPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PartialPDF struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PartialPDF: %s", err)
	}

	count, err = PartialPDFS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
